// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using versioning_manager_api.DbContext.DevDatabase;

#nullable disable

namespace versioning_manager_api.Migrations
{
    [DbContext(typeof(VmDatabaseContext))]
    [Migration("20250402082329_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("versioning_manager_api.DevDatabase.DbDevice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreationUTC")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_utc");

                    b.Property<int>("CreatorId")
                        .HasColumnType("integer")
                        .HasColumnName("creator_id");

                    b.Property<DateTimeOffset>("ExpireUTC")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("key_expires_utc");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("KeyHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("key");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("salt");

                    b.Property<string>("SourceHash")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("source");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("SourceHash");

                    b.ToTable("device", "devices");
                });

            modelBuilder.Entity("versioning_manager_api.DevDatabase.DbImageInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreationUTC")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_utc");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("creator_device_id");

                    b.Property<string>("DockerCompose")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("docker_compose_file");

                    b.Property<string>("ImageTag")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image_tag");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer")
                        .HasColumnName("project_entry");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("service_name");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ProjectId");

                    b.ToTable("images", "projects");
                });

            modelBuilder.Entity("versioning_manager_api.DevDatabase.DbProject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.PrimitiveCollection<string[]>("AvailableSources")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("available_sources");

                    b.Property<DateTimeOffset>("CreationUTC")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_utc");

                    b.Property<int>("CreatorId")
                        .HasColumnType("integer")
                        .HasColumnName("creator_user_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("projects", "projects");
                });

            modelBuilder.Entity("versioning_manager_api.DevDatabase.DbProjectEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActual")
                        .HasColumnType("boolean")
                        .HasColumnName("is_actual");

                    b.Property<DateTimeOffset>("LastUpdateUTC")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_update_utc");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer")
                        .HasColumnName("project");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("project_entries", "projects");
                });

            modelBuilder.Entity("versioning_manager_api.DevDatabase.DbRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("name");

                    b.PrimitiveCollection<string[]>("Roles")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("roles");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("roles", "users");
                });

            modelBuilder.Entity("versioning_manager_api.DevDatabase.DbUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreationUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_utc");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTimeOffset>("LastUpdateUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_update_utc");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(132)
                        .HasColumnType("character varying(132)")
                        .HasColumnName("password");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("salt");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("users", "users");
                });

            modelBuilder.Entity("versioning_manager_api.DevDatabase.DbDevice", b =>
                {
                    b.HasOne("versioning_manager_api.DevDatabase.DbUser", "Creator")
                        .WithMany("CreatedDevices")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("versioning_manager_api.DevDatabase.DbImageInfo", b =>
                {
                    b.HasOne("versioning_manager_api.DevDatabase.DbDevice", "Creator")
                        .WithMany("CreatedImages")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("versioning_manager_api.DevDatabase.DbProjectEntry", "Project")
                        .WithMany("Images")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("versioning_manager_api.DevDatabase.DbProject", b =>
                {
                    b.HasOne("versioning_manager_api.DevDatabase.DbUser", "Creator")
                        .WithMany("Projects")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("versioning_manager_api.DevDatabase.DbProjectEntry", b =>
                {
                    b.HasOne("versioning_manager_api.DevDatabase.DbProject", "Project")
                        .WithMany("Entries")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("versioning_manager_api.DevDatabase.DbUser", b =>
                {
                    b.HasOne("versioning_manager_api.DevDatabase.DbRole", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("versioning_manager_api.DevDatabase.DbDevice", b =>
                {
                    b.Navigation("CreatedImages");
                });

            modelBuilder.Entity("versioning_manager_api.DevDatabase.DbProject", b =>
                {
                    b.Navigation("Entries");
                });

            modelBuilder.Entity("versioning_manager_api.DevDatabase.DbProjectEntry", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("versioning_manager_api.DevDatabase.DbRole", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("versioning_manager_api.DevDatabase.DbUser", b =>
                {
                    b.Navigation("CreatedDevices");

                    b.Navigation("Projects");
                });
#pragma warning restore 612, 618
        }
    }
}
